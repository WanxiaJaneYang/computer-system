// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	Decode(in=instruction, type=type, a=a, c1=c1, c2=c2, c3=c3, c4=c4, c5=c5, c6=c6, d1=d1, d2=d2, d3=writeM, j1=j1, j2=j2, j3=j3);//decode first
	
	Mux16(a=instruction, b=ALUout, sel=type, out=dataForA);//mux16 to select whether load data from instruction directly or load data from alu for A register
	ARegister(in=dataForA, load=d1, out=ARegister, out[0..14]=addressM);//load register A either from the A instruction or C instruction
	
	DRegister(in=ALUout, load=d2, out=DRegister);//register D from ALU output, control bit is d2

	Mux16(a=ARegister, b=inM, sel=a, out=AorM);//select between A or M register
	ALU(x=DRegister, y=AorM, zx=c1, nx=c2, zy=c3, ny=c4,f=c5, no=c6, out=ALUout, out=outM, zr=zr, ng=ng);//connect ALU
	Jump(j1=j1, j2=j2, j3=j3, zr=zr, ng=ng, jump=jump);//decide to jump or not
	Not(in=jump, out=notJump);//get the signal notJump
	PC(in=ARegister,reset=reset,inc=notJump, load=jump,out[0..14]=pc);//load from A register if need to jump, incre by 1 if not jump, reset to 0 if reset is asserted

}