// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/DMux8Way.hdl

/**
 * 8-way demultiplexor:
 * {a, b, c, d, e, f, g, h} = {in, 0, 0, 0, 0, 0, 0, 0} if sel == 000
 *                            {0, in, 0, 0, 0, 0, 0, 0} if sel == 001
 *                            etc.
 *                            {0, 0, 0, 0, 0, 0, 0, in} if sel == 111
 */

CHIP DMux8Way {
    IN in, sel[3];
    OUT a, b, c, d, e, f, g, h;

    PARTS:
    DMux4Way(in=in, sel=sel[0..1], a=aOre, b=bOrf, c=cOrg, d=dOrh);
	//use DMux4Way to read the first two buses of sel and divide the possible output into two possible cases
    DMux(in=aOre, sel=sel[2], a=a, b=e);
	//if sel[2]==0, the input should be output through a, else through b
	//this DMux only receives input when sel[0]==0, sel[1]==0
    DMux(in=bOrf, sel=sel[2], a=b, b=f);
	//if sel[2]==0, the input should be output through b, else through f
	//this DMux only receives input when sel[0]==1, sel[1]==0
    DMux(in=cOrg, sel=sel[2], a=c, b=g);
	//if sel[2]==0, the input should be output through c, else through g
	//this DMux only receives input when sel[0]==0, sel[1]==1
    DMux(in=dOrh, sel=sel[2], a=d, b=h);
	//if sel[2]==0, the input should be output through d, else through h
	//this DMux only receives input when sel[0]==1, sel[1]==1
}